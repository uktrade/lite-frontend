version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.7

parameters:
  run_ui_tests:
    type: boolean
    default: false
  run_unit_tests:
    type: boolean
    default: true
  api_git_tag:
    type: string
    default: latest
  environment:
    type: string
    default: devdata

###############################################################################
# Env vars
###############################################################################
common_env_vars: &common_env_vars
  ENVIRONMENT: << pipeline.parameters.environment >>
  LITE_API_URL: https://lite-api-<< pipeline.parameters.environment >>.london.cloudapps.digital/
  PIPENV_VENV_IN_PROJECT: true
  LITE_INTERNAL_HAWK_KEY: $LITE_INTERNAL_HAWK_KEY_<< pipeline.parameters.environment >>
  LITE_EXPORTER_HAWK_KEY: $LITE_EXPORTER_HAWK_KEY_<< pipeline.parameters.environment >>

###############################################################################
# Images
###############################################################################

image_python: &image_python
  image: cimg/python:3.9.18

image_redis: &image_redis
  image: cimg/redis:6.2.6

image_node: &image_node
  image: cimg/node:16.19

###############################################################################
# Commands
###############################################################################

commands:
  run_make:
    description: Run makefile target with some setup
    parameters:
      label:
        type: string
        default: Execute make << parameters.target >>
      target:
        type: string
    steps:
      - run:
          name: Copy config
          command: |
            cp ci.caseworker.env caseworker.env
            cp ci.exporter.env exporter.env
            cp ci.api.env api.env
      - run:
          name: << parameters.label >>
          command: make << parameters.target >>

  setup_code:
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - restore_cache:
          keys:
            - pipenv-cache-repo-dir-v1-{{ checksum "Pipfile.lock" }}
      - run: pipenv install --dev --deploy
      - run: git submodule update --init

  setup_code_e2e:
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - restore_cache:
          keys:
            - pipenv-cache-circleci-dir-v1-{{ checksum "Pipfile.lock" }}
      - run: pipenv install --dev --deploy
      - run: git submodule update --init

  cache_env_repo_dir:
    steps:
      - save_cache:
          name: Save pipenv cache
          key: pipenv-cache-repo-dir-v1-{{ checksum "Pipfile.lock" }}
          paths:
            - .venv

  cache_env_circleci_dir:
    steps:
      - save_cache:
          name: Save pipenv cache
          key: pipenv-cache-circleci-dir-v1-{{ checksum "Pipfile.lock" }}
          paths:
            - /home/circleci/.local/share/virtualenvs/
            - /opt/circleci/.pyenv/versions/

  backend_unit_tests:
    parameters:
      alias:
        type: string
    steps:
      - setup_code
      - run:
          name: Run unit tests
          command: |
            pipenv run pytest --cov=. --cov-config=.coveragerc
      - run:
          name: Rename coverage file
          command: mkdir coverage-output && cp .coverage coverage-output/.coverage.<<parameters.alias>>
      - persist_to_workspace:
          root: coverage-output
          paths:
            - .coverage.*
      - cache_env_repo_dir

  build_api_image:
    parameters:
      api_branch:
        default: auto
        type: string
    steps:
      - run:
          name: Clone API
          command: |
            git clone git@github.com:uktrade/lite-api.git
            cd lite-api
            git checkout $(python ../which_branch.py <<parameters.api_branch>>)
      - run:
          name: Git Submodule Checkout
          command: |
            cd lite-api
            git submodule sync
            git submodule update --init
      - run: cd lite-api; docker build -f Dockerfile.e2e -t liteapi .

  check_lint:
    steps:
      - run: pipenv install pre-commit
      - restore_cache:
          keys:
            - pre-commit-cache-{{ checksum ".pre-commit-config.yaml" }}
      - run: pipenv run pre-commit run eslint --from-ref origin/HEAD --to-ref HEAD
      - run: pipenv run pre-commit run prettier --from-ref origin/HEAD --to-ref HEAD
      - run: pipenv run bandit -r . --skip=B101 --exclude=/.venv,/ui_tests,/unit_tests,/tests_common
      - run: pipenv run prospector
      - run: pipenv run black . --check --diff
      - save_cache:
          key: pre-commit-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit

  prepare_e2e_tests:
    parameters:
      api_branch:
        default: auto
        type: string
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
            name: "Install dependencies"
            command: pip3 install pipenv
      - setup_code_e2e
      - build_api_image:
          api_branch: <<parameters.api_branch>>
      - run: echo $GCLOUD_SERVICE_KEY | docker login -u _json_key --password-stdin https://eu.gcr.io/sre-docker-registry
      - run:
          name: "Add aliases to /etc/hosts"
          command: |
            sudo -- sh -c "echo 127.0.0.1 exporter >> /etc/hosts"
            sudo -- sh -c "echo 127.0.0.1 caseworker >> /etc/hosts"
            sudo -- sh -c "echo 127.0.0.1 api >> /etc/hosts"
      - run:
          name: "Copy env files"
          command: |
            cp ci.exporter.env exporter.env
            cp ci.caseworker.env caseworker.env
      - run: mkdir test_results

  finish_e2e_tests:
    steps:
      - cache_env_circleci_dir
      - store_artifacts:
          path: ui_tests/screenshots
      - store_test_results:
          path: test_results

  run_e2e_exporter:
    steps:
      - run:
            name: "decode secret ENV variable"
            command: echo 'export EXPORTER_AUTHBROKER_CLIENT_SECRET="$(echo $EXPORTER_AUTHBROKER_CLIENT_SECRET_BASE64 | base64 -d)"' >> $BASH_ENV
      - run_make:
          label: Run exporter e2e tests
          target: start-exporter exporter-e2e-selenium-test

  run_e2e_caseworker:
    steps:
      - run_make:
          label: Run caseworker e2e tests
          target: start-caseworker caseworker-e2e-selenium-test

###############################################################################
# Jobs
###############################################################################

jobs:
  lint:
    working_directory: ~/repo
    docker:
      - <<: *image_python
    steps:
      - setup_code
      - check_lint

  caseworker_unit_test:
    working_directory: ~/repo
    docker:
      - <<: *image_python
      - <<: *image_redis
    environment:
      <<: *common_env_vars
      PIPENV_DOTENV_LOCATION: tests.caseworker.env
      PYTEST_ADDOPTS: unit_tests/caseworker lite_forms/tests.py --capture=no --nomigrations
      FILE_UPLOAD_HANDLERS: django.core.files.uploadhandler.MemoryFileUploadHandler,django.core.files.uploadhandler.TemporaryFileUploadHandler
    steps:
      - backend_unit_tests:
          alias: caseworker

  exporter_unit_test:
    working_directory: ~/repo
    docker:
      - <<: *image_python
      - <<: *image_redis
    environment:
      <<: *common_env_vars
      PIPENV_DOTENV_LOCATION: tests.exporter.env
      PYTEST_ADDOPTS: unit_tests/exporter --capture=no --nomigrations
      FILE_UPLOAD_HANDLERS: django.core.files.uploadhandler.MemoryFileUploadHandler,django.core.files.uploadhandler.TemporaryFileUploadHandler
    steps:
      - backend_unit_tests:
          alias: exporter

  core_unit_test:
    working_directory: ~/repo
    docker:
      - <<: *image_python
      - <<: *image_redis
    environment:
      <<: *common_env_vars
      PIPENV_DOTENV_LOCATION: tests.exporter.env
      PYTEST_ADDOPTS: unit_tests/core --capture=no --nomigrations
      FILE_UPLOAD_HANDLERS: django.core.files.uploadhandler.MemoryFileUploadHandler,django.core.files.uploadhandler.TemporaryFileUploadHandler
    steps:
      - backend_unit_tests:
          alias: core

  check_coverage:
    working_directory: ~/repo
    docker:
      - <<: *image_python
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - run: pip install coverage diff_cover
      - run: coverage combine tmp
      - run: coverage xml
      - run: coverage html
      - store_artifacts:
          path: htmlcov
      - run: diff-cover coverage.xml --compare-branch=origin/dev --html-report coverage-report.html
      - store_artifacts:
          path: coverage-report.html
      - run: zip -r coverage.zip htmlcov coverage-report.html
      - store_artifacts:
          path: coverage.zip
      - run: diff-cover coverage.xml --compare-branch=origin/dev --fail-under=100

  frontend_unit_test:
    docker:
      - <<: *image_node
    steps:
      - checkout
      - run: npm install
      - run: npm run test

  frontend_artefacts_check:
    docker:
      - <<: *image_node
    steps:
      - checkout
      - run: npm install --include=dev --no-save
      - run: npm run build_all
      - run: git diff --exit-code

  caseworker_e2e_test:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: large
    parallelism: 10
    environment:
      PIPENV_YES: 1
    steps:
      - prepare_e2e_tests:
          api_branch: auto
      - run_e2e_caseworker
      - finish_e2e_tests

  exporter_e2e_test:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: large
    parallelism: 2
    environment:
      PIPENV_YES: 1
    steps:
      - prepare_e2e_tests:
          api_branch: auto
      - run_e2e_exporter
      - finish_e2e_tests

  caseworker_e2e_test_jenkins:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: large
    parallelism: 10
    environment:
      PIPENV_YES: 1
    steps:
      - prepare_e2e_tests:
          api_branch: << pipeline.parameters.api_git_tag >>
      - run_e2e_caseworker
      - finish_e2e_tests

  exporter_e2e_test_jenkins:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: large
    parallelism: 2
    environment:
      PIPENV_YES: 1
    steps:
      - prepare_e2e_tests:
          api_branch: << pipeline.parameters.api_git_tag >>
      - run_e2e_exporter
      - finish_e2e_tests

workflows:
  version: 2
  tests:
    when: << pipeline.parameters.run_unit_tests >>
    jobs:
      - lint
      - caseworker_unit_test
      - exporter_unit_test
      - core_unit_test
      - check_coverage:
          requires:
              - caseworker_unit_test
              - exporter_unit_test
              - core_unit_test
      - frontend_unit_test
      - frontend_artefacts_check
      - caseworker_e2e_test
      - exporter_e2e_test
  ui_tests:
    when: << pipeline.parameters.run_ui_tests >>
    jobs:
      - caseworker_e2e_test_jenkins
      - exporter_e2e_test_jenkins
