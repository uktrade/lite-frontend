version: 2.1
parameters:
  run_ui_tests:
    type: boolean
    default: false
  run_unit_tests:
    type: boolean
    default: true
  api_git_tag:
    type: string
    default: latest
  environment:
    type: string
    default: devdata

###############################################################################
# Env vars
###############################################################################
common_env_vars: &common_env_vars
  ENVIRONMENT: << pipeline.parameters.environment >>
  LITE_API_URL: https://lite-api-<< pipeline.parameters.environment >>.london.cloudapps.digital/
  PIPENV_VENV_IN_PROJECT: true
  LITE_INTERNAL_HAWK_KEY: $LITE_INTERNAL_HAWK_KEY_<< pipeline.parameters.environment >>
  LITE_EXPORTER_HAWK_KEY: $LITE_EXPORTER_HAWK_KEY_<< pipeline.parameters.environment >>

###############################################################################
# Images
###############################################################################

image_python: &image_python
  image: circleci/python:3.7

image_python_browsers: &image_python_browsers
  image: circleci/python:3.7-browsers

image_redis: &image_redis
  image: circleci/redis:3.2-alpine

###############################################################################
# Commands
###############################################################################

commands:
  run_make:
    description: Run makefile target with some setup
    parameters:
      label:
        type: string
        default: Execute make << parameters.target >>
      target:
        type: string
    steps:
      - run:
          name: Copy config
          command: |
            cp ci.caseworker.env caseworker.env
            cp ci.exporter.env exporter.env
            cp ci.api.env api.env
      - run:
          name: << parameters.label >>
          command: make << parameters.target >>

  store_playwright_artifacts:
    description: Store Playwright artifacts
    steps:
      - store_artifacts:
          path: playwright_videos/

  vpn_install:
    description: "Install OpenVPN client"
    steps:
      - run:
          name: Install OpenVPN
          command: |
            sudo apt update && sudo apt install apt-transport-https
            sudo wget https://swupdate.openvpn.net/repos/openvpn-repo-pkg-key.pub
            sudo apt-key add openvpn-repo-pkg-key.pub

            ### The repository URL will depend on your Ubuntu release name (here we chose "focal" since Ubuntu 20.04 is used
            sudo wget -O /etc/apt/sources.list.d/openvpn3.list https://swupdate.openvpn.net/community/openvpn3/repos/openvpn3-focal.list
            sudo apt update && sudo apt install openvpn3

  vpn_connect:
    parameters:
      config:
        description: "ENV var name containing OpenVPN client .ovpn config file content base64 encoded"
        type: env_var_name
        default: VPN_CONFIG
    steps:
      - run:
          name: VPN Setup
          background: true
          command: |
            echo ${<<parameters.config>>:?} | base64 --decode > /tmp/config.ovpn

            ### IMPORTANT: Include the following line to exclude the connection from CircleCI and the link-local range
            phone_home=$(ss -Hnto state established '( sport = :ssh )' | head -n1 | awk '{ split($4, a, ":"); print a[1] }')

            if [ -n "$phone_home" ]; then
              echo -e "\nroute $phone_home 255.255.255.255 net_gateway" >> /tmp/config.ovpn
            fi

            echo "\nroute 169.254.0.0 255.255.0.0 net_gateway" >> /tmp/config.ovpn

            # This will start the connection
            sudo openvpn3 session-start \
              --config /tmp/config.ovpn \
              > /tmp/openvpn.log

            dig great.dev.uktrade.digital +short
            curl -I https://great.dev.uktrade.digital/

      - run:
          name: VPN logs
          background: true
          command: tail -f /var/log/syslog

      - run:
          name: Wait for the connection to be established and check
          command: |
            until sudo openvpn3 sessions-list|grep "Client connected"; do
              echo "Attempting to connect to VPN server..."
              sleep 1;
            done
            printf "\nPublic IP is now $(curl checkip.amazonaws.com)\n"

  vpn_disconnect:
    steps:
      - run:
          name: Disconnect from OpenVPN
          command: |
            SESSION_PATH=$(sudo openvpn3 sessions-list | grep Path | awk -F': ' '{print $2}')
            echo $SESSION_PATH
            sudo openvpn3 session-manage --session-path $SESSION_PATH --disconnect
          when: always

  setup_code:
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - run: pipenv install --dev --deploy
      - run: git submodule update --init

  backend_unit_tests:
    parameters:
      alias:
        type: string
    steps:
      - run:
          name: Run unit tests
          command: |
            pipenv run pytest --cov=.  --cov-report xml --cov-config=.coveragerc
      - run:
          name: Code coverage report
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
            ./codecov

  ui_tests:
    steps:
      - run: mkdir -p test-results
      - run: |
          pipenv run pytest \
            -rP \
            --reruns=1 \
            --reruns-delay=60 \
            --headless \
            --disable-pytest-warnings \
            --junitxml=test-results/junit.xml
      - store_artifacts:
          path: ui_tests/screenshots
      - store_artifacts:
          path: openvpn.log
      - store_test_results:
          path: test-results

  lint:
    steps:
      - run: pipenv run bandit -r . --skip=B101 --exclude=/.venv,/ui_tests,/unit_tests,/tests_common
      - run: pipenv run prospector
      - run: pipenv run black . --check --diff

###############################################################################
# Jobs
###############################################################################

jobs:
  lint:
    working_directory: ~/repo
    docker:
      - <<: *image_python
    steps:
      - setup_code
      - lint

  caseworker_unit_test:
    working_directory: ~/repo
    docker:
      - <<: *image_python
      - <<: *image_redis
    environment:
      <<: *common_env_vars
      PIPENV_DOTENV_LOCATION: example.caseworker.env
      PYTEST_ADDOPTS: unit_tests/caseworker lite_forms/tests.py --capture=no --nomigrations
      FILE_UPLOAD_HANDLERS: django.core.files.uploadhandler.MemoryFileUploadHandler,django.core.files.uploadhandler.TemporaryFileUploadHandler
    steps:
      - setup_code
      - backend_unit_tests:
          alias: caseworker

  exporter_unit_test:
    working_directory: ~/repo
    docker:
      - <<: *image_python
      - <<: *image_redis
    environment:
      <<: *common_env_vars
      PIPENV_DOTENV_LOCATION: example.exporter.env
      PYTEST_ADDOPTS: unit_tests/exporter --capture=no --nomigrations
      FILE_UPLOAD_HANDLERS: django.core.files.uploadhandler.MemoryFileUploadHandler,django.core.files.uploadhandler.TemporaryFileUploadHandler
    steps:
      - setup_code
      - backend_unit_tests:
          alias: exporter

  core_unit_test:
    working_directory: ~/repo
    docker:
      - <<: *image_python
      - <<: *image_redis
    environment:
      <<: *common_env_vars
      PIPENV_DOTENV_LOCATION: example.exporter.env
      PYTEST_ADDOPTS: unit_tests/core --capture=no --nomigrations
      FILE_UPLOAD_HANDLERS: django.core.files.uploadhandler.MemoryFileUploadHandler,django.core.files.uploadhandler.TemporaryFileUploadHandler
    steps:
      - setup_code
      - backend_unit_tests:
          alias: core

  frontend_unit_test:
    docker:
      - image: cimg/node:16.15
    steps:
      - checkout
      - run: npm install
      - run: npm run test

  caseworker_ui_test:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    environment:
      <<: *common_env_vars
      # not set PIPENV_DOTENV_LOCATION - instead set the env vars in circle
      DJANGO_SETTINGS_MODULE: conf.caseworker
      PYTEST_ADDOPTS: ui_tests/caseworker --capture=no --nomigrations -n3
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get --only-upgrade install google-chrome-stable
      - run: pyenv install 3.7.0
      - run: pyenv global 3.7.0
      - run: pip install pipenv
      - setup_code
      - ui_tests

  exporter_ui_test:
    machine:
      image: ubuntu-2004:202008-01
      docker_layer_caching: true
    environment:
      <<: *common_env_vars
      # not set PIPENV_DOTENV_LOCATION - instead set the env vars in circle
      DJANGO_SETTINGS_MODULE: conf.exporter
      PYTEST_ADDOPTS: ui_tests/exporter --capture=no --nomigrations -n3
    steps:
      - run: sudo apt-get update
      - run: sudo apt-get --only-upgrade install google-chrome-stable
      - run: pyenv install 3.7.0
      - run: pyenv global 3.7.0
      - run: pip install pipenv
      - setup_code
      - ui_tests

  caseworker_e2e_test:
    machine:
      image: ubuntu-2004:202008-01
    resource_class: large
    steps:
      - checkout
      - run: git submodule update --init
      - run: echo $GCLOUD_SERVICE_KEY | docker login -u _json_key --password-stdin https://eu.gcr.io/sre-docker-registry
      - run_make:
          label: Run caseworker e2e tests
          target: start-caseworker caseworker-e2e-selenium-test API_GIT_TAG="<< pipeline.parameters.api_git_tag >>"
      - store_playwright_artifacts

  exporter_e2e_test:
    machine:
      image: ubuntu-2004:202008-01
    resource_class: large
    steps:
      - checkout
      - run: git submodule update --init
      - run: echo $GCLOUD_SERVICE_KEY | docker login -u _json_key --password-stdin https://eu.gcr.io/sre-docker-registry
      - run_make:
          label: Run exporter e2e tests
          target: start-exporter exporter-e2e-test API_GIT_TAG="<< pipeline.parameters.api_git_tag >>"
      - store_playwright_artifacts

workflows:
  version: 2
  tests:
    when: << pipeline.parameters.run_unit_tests >>
    jobs:
      - lint
      - caseworker_unit_test
      - exporter_unit_test
      - core_unit_test
      - frontend_unit_test
      - caseworker_e2e_test
      - exporter_e2e_test
  ui_tests:
    when: << pipeline.parameters.run_ui_tests >>
    jobs:
      - caseworker_e2e_test
      - exporter_e2e_test
