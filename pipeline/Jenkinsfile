import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def triggerBuild(branch, api_git_tag, environment)
{
    withCredentials([string(credentialsId: 'lite-circle-ci', variable: 'TOKEN')]) {

        def body = JsonOutput.toJson([
            branch: branch,
            parameters: [run_ui_tests: true, run_unit_tests: false, api_git_tag: api_git_tag, environment: environment]
        ])

        def response = httpRequest (
            consoleLogResponseBody: false,
            contentType: 'APPLICATION_JSON',
            acceptType: 'APPLICATION_JSON',
            customHeaders: [[name: 'Circle-Token', value: TOKEN]],
            httpMode: 'POST',
            requestBody: body,
            url: "https://circleci.com/api/v2/project/gh/uktrade/lite-frontend/pipeline")

        if (response.status >= 300){
            throw new Exception("ERROR: triggerBuild() failed")
        }
        def json = new JsonSlurper().parseText(response.content)
        return [json.state, json.id]
   }
}

def getBuildStatus(number)
{
    withCredentials([string(credentialsId: 'lite-circle-ci', variable: 'TOKEN')]) {
        def response = httpRequest (
            consoleLogResponseBody: false,
            customHeaders: [[name: 'Circle-Token', value: TOKEN]],
            acceptType: 'APPLICATION_JSON',
            url: "https://circleci.com/api/v2/pipeline/$number/workflow")
        if (response.status >= 300){
            throw new Exception("ERROR: getBuildStatus() failed")
        }

        def json = new JsonSlurper().parseText(response.content)
        return json.items[0].status
    }
}

def waitForBuildStatusToChange(number, status, wait_states, msg){
    println " ... $msg"

    while(status in wait_states){
        sleep(45)
        status = getBuildStatus(number)
        println "Status = $status"
    }
    return status
}

pipeline {

    parameters {
        choice(name: 'ENVIRONMENT', description: '(not used)', choices: 'dev\nuat\ndevdata\ndemo')
        gitParameter(
            branch: '',
            branchFilter: 'origin/(.*)',
            defaultValue: 'master',
            description: 'choose branch or release tag to run against',
            name: 'BRANCH',
            quickFilterEnabled: true,
            selectedValue: 'NONE',
            sortMode: 'NONE',
            tagFilter: '*',
            type: 'PT_BRANCH_TAG',
            useRepository: 'git@github.com:uktrade/lite-frontend.git'
        )
        gitParameter(
            branch: '',
            branchFilter: 'origin/(.*)',
            defaultValue: 'latest',
            description: 'choose API branch or release tag for LITE GCR image',
            name: 'API_GIT_TAG',
            quickFilterEnabled: true,
            selectedValue: 'NONE',
            sortMode: 'NONE',
            tagFilter: '*',
            type: 'PT_BRANCH_TAG',
            useRepository: 'git@github.com:uktrade/lite-api.git'
        )
    }

    agent any

    stages {
        stage('trigger build') {
            steps{
                script{
                    println "Triggering UI tests"
                    (status, number) = triggerBuild(params.BRANCH, params.API_GIT_TAG, params.ENVIRONMENT)
                    println "Triggered UI tests"

                    status = waitForBuildStatusToChange(number, status, ['queued', 'not_running', 'pending'], "waiting for job to start")
                    status = waitForBuildStatusToChange(number, status, ['running'], "waiting for job to finish")

                    println "Final status = $status"
                    currentBuild.result = status in ['success','fixed']? 'SUCCESS': 'FAILURE'
                }
            }
        }
    }
}
