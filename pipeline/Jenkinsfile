import groovy.json.JsonSlurper
import groovy.json.JsonOutput


def triggerBuild(branch, environment, token)
{
    def body = JsonOutput.toJson([
        branch: branch,
        parameters: [run_ui_tests: true, run_unit_tests: false, environment: environment]
    ])
    def response = httpRequest (
        consoleLogResponseBody: false,
        contentType: 'APPLICATION_JSON',
        acceptType: 'APPLICATION_JSON',
        customHeaders: [[name: 'Circle-Token', value: token]],
        httpMode: 'POST',
        requestBody: body,
        url: "https://circleci.com/api/v2/project/gh/uktrade/lite-frontend/pipeline")
    if (response.status >= 300){
        throw new Exception("ERROR: triggerBuild() failed")
    }
    def json = new JsonSlurper().parseText(response.content)
    return [json.status, json.number]
}

def getBuildStatus( number, token )
{
    def response = httpRequest (
        consoleLogResponseBody: false,
        customHeaders: [[name: 'Circle-Token', value: token]],
        acceptType: 'APPLICATION_JSON',
        url: "https://circleci.com/api/v2/project/gh/uktrade/lite-frontend/job/$number")
    if (response.status >= 300){
        throw new Exception("ERROR: getBuildStatus() failed")
    }
    def json = new JsonSlurper().parseText(response.content)
    return [json.status, json.number]
}

def waitForBuildStatusToChange(number, current_status, wait_states, msg, token){
    println " ... $msg"
    while(status in wait_states){
        sleep(45)
        (status, number) = getBuildStatus( number, token)
    }
    return status
}

pipeline {

    parameters {
        choice(name: 'ENVIRONMENT', description: 'choose what environment to run in', choices: 'dev\nqa\ndevpopcorn\ndevkoala\nsandbox\nstaging\nuat\ndevdata')
        string(name: 'BRANCH', defaultValue: 'master', description: 'choose branch to run against')
        string(name: 'CIRCLE_API_TOKEN')
    }

    agent any

    stages {
        stage('trigger build') {
            steps{
                script{
                    println "Triggering UI tests"
                    (status, number) = triggerBuild(params.BRANCH, params.ENVIRONMENT , params.CIRCLE_API_TOKEN)
                    println "Triggered UI tests"

                    status = waitForBuildStatusToChange( number, status, ['queued', 'not_running'], "waiting for job to start", params.CIRCLE_API_TOKEN)
                    status = waitForBuildStatusToChange( number, status, ['running'], "waiting for job to finish", params.CIRCLE_API_TOKEN)

                    println "Final status = $status"
                    currentBuild.result = status in ['success','fixed']? 'SUCCESS': 'FAILURE'
                }
            }
        }
    }
}
